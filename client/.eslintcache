[{"/Users/maciejmondalski/Desktop/Web-Dev/EatTheBlocks/Dapp30/Voting-DApp/client/src/index.js":"1","/Users/maciejmondalski/Desktop/Web-Dev/EatTheBlocks/Dapp30/Voting-DApp/client/src/App.js":"2","/Users/maciejmondalski/Desktop/Web-Dev/EatTheBlocks/Dapp30/Voting-DApp/client/src/utils.js":"3","/Users/maciejmondalski/Desktop/Web-Dev/EatTheBlocks/Dapp30/Voting-DApp/client/src/GlobalStyles.js":"4"},{"size":197,"mtime":1608109193726,"results":"5","hashOfConfig":"6"},{"size":9612,"mtime":1608199375441,"results":"7","hashOfConfig":"6"},{"size":1152,"mtime":1608127141837,"results":"8","hashOfConfig":"6"},{"size":379,"mtime":1608198020235,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1ss24oz",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"12"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/maciejmondalski/Desktop/Web-Dev/EatTheBlocks/Dapp30/Voting-DApp/client/src/index.js",[],["20","21"],"/Users/maciejmondalski/Desktop/Web-Dev/EatTheBlocks/Dapp30/Voting-DApp/client/src/App.js",["22"],"import React, { useEffect, useState } from \"react\";\nimport Voting from \"./contracts/Voting.json\";\nimport { getWeb3 } from \"./utils.js\";\nimport GlobalStyles from \"./GlobalStyles\";\nimport styled from \"styled-components\";\n\nfunction App() {\n  const [web3, setWeb3] = useState(undefined);\n  const [accounts, setAccounts] = useState(undefined);\n  const [contract, setContract] = useState(undefined);\n  const [admin, setAdmin] = useState(undefined);\n  const [ballots, setBallots] = useState([]);\n\n  useEffect(() => {\n    const init = async () => {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = Voting.networks[networkId];\n      const contract = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      const admin = await contract.methods.admin().call();\n\n      setWeb3(web3);\n      setAccounts(accounts);\n      setContract(contract);\n      setAdmin(admin);\n    };\n    init();\n    window.ethereum.on(\"accountsChanged\", (accounts) => {\n      setAccounts(accounts);\n    });\n  }, []);\n\n  const isReady = () => {\n    return (\n      typeof contract !== \"undefined\" &&\n      typeof web3 !== \"undefined\" &&\n      typeof accounts !== \"undefined\" &&\n      typeof admin !== \"undefined\"\n    );\n  };\n\n  useEffect(() => {\n    if (isReady()) {\n      updateBallots();\n    }\n  }, [accounts, contract, web3, admin]);\n\n  async function updateBallots() {\n    const nextBallotId = parseInt(\n      await contract.methods.nextBallotId().call()\n    );\n\n    const ballots = [];\n    for (let i = 0; i < nextBallotId; i++) {\n      const [ballot, hasVoted] = await Promise.all([\n        contract.methods.getBallot(i).call(),\n        contract.methods.votes(accounts[0], i).call(),\n      ]);\n      ballots.push({ ...ballot, hasVoted });\n    }\n    setBallots(ballots);\n  }\n\n  async function createBallot(e) {\n    e.preventDefault();\n    const name = e.target.elements[0].value;\n    const choices = e.target.elements[1].value.split(\",\");\n    const duration = e.target.elements[2].value;\n    await contract.methods\n      .createBallot(name, choices, duration)\n      .send({ from: accounts[0] });\n    await updateBallots();\n  }\n\n  async function addVoters(e) {\n    e.preventDefault();\n    const voters = e.target.elements[0].value.split(\",\");\n    await contract.methods\n      .addVoters(voters)\n      .send({ from: accounts[0] });\n  }\n\n  async function vote(e, ballotId) {\n    e.preventDefault();\n    const select = e.target.elements[0];\n    const choiceId = select.options[select.selectedIndex].value;\n    await contract.methods\n      .vote(ballotId, choiceId)\n      .send({ from: accounts[0] });\n    await updateBallots();\n  }\n\n  function isFinished(ballot) {\n    const now = new Date().getTime();\n    const ballotEnd = new Date(parseInt(ballot.end) * 1000).getTime();\n    return ballotEnd - now > 0 ? false : true;\n  }\n\n  if (!isReady()) {\n    return <div>Loading...</div>;\n  }\n  return (\n    <div className=\"container\">\n      <GlobalStyles />\n\n      <StyledLogo>\n        <h1 className=\"text-center\">Voting</h1>\n        <i className=\"icon fas fa-vote-yea\"></i>\n      </StyledLogo>\n\n      {accounts[0].toLowerCase() === admin.toLowerCase() ? (\n        <>\n          {/*} Create Ballot */}\n\n          <CreateBallot>\n            <div>\n              <h2>Create ballot</h2>\n\n              <StyledForm onSubmit={(e) => createBallot(e)}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"name\">Name</label>\n                  <input\n                    placeholder=\"e.g., What do you choose?\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"name\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"choices\">Choices</label>\n                  <input\n                    placeholder=\"e.g., choice1, choice2, choice3\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"choices\"\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"duration\">Duration (s)</label>\n                  <input\n                    placeholder=\"e.g., 180\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"duration\"\n                  />\n                </div>\n                <StyledButton\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                >\n                  Submit\n                </StyledButton>\n              </StyledForm>\n            </div>\n          </CreateBallot>\n\n          {/*} Add Voters */}\n\n          <AddVoters>\n            <div>\n              <h2>Add voters</h2>\n              <StyledForm onSubmit={(e) => addVoters(e)}>\n                <div className=\"form-group\">\n                  <label htmlFor=\"voters\">Voters</label>\n                  <input\n                    placeholder=\"enter voter address\"\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"voters\"\n                  />\n                </div>\n                <StyledButton\n                  type=\"submit\"\n                  className=\"btn btn-primary\"\n                >\n                  Submit\n                </StyledButton>\n              </StyledForm>\n            </div>\n          </AddVoters>\n        </>\n      ) : null}\n\n      {/*} Votes List */}\n      <Box>\n        <Table>\n          <h2>Votes</h2>\n          <table className=\"table\">\n            <thead>\n              <tr>\n                <th>Id</th>\n                <th>Name</th>\n                <th>Votes</th>\n                <th>Vote</th>\n                <th>Ends on</th>\n              </tr>\n            </thead>\n            <tbody>\n              {ballots.map((ballot) => (\n                <tr key={ballot.id}>\n                  <td>{ballot.id}</td>\n                  <td>{ballot.name}</td>\n                  <td>\n                    <ul>\n                      {ballot.choices.map((choice) => (\n                        <li key={choice.id}>\n                          id: {choice.id}, name: {choice.name}, votes:{\" \"}\n                          {choice.votes}\n                        </li>\n                      ))}\n                    </ul>\n                  </td>\n                  <td>\n                    {isFinished(ballot) ? (\n                      \"Vote finished\"\n                    ) : ballot.hasVoted ? (\n                      \"You already voted\"\n                    ) : (\n                      <form onSubmit={(e) => vote(e, ballot.id)}>\n                        <div className=\"form-group\">\n                          <label htmlFor=\"choice\">Choice</label>\n                          <select\n                            className=\"form-control\"\n                            id=\"choice\"\n                          >\n                            {ballot.choices.map((choice) => (\n                              <option\n                                key={choice.id}\n                                value={choice.id}\n                              >\n                                {choice.name}\n                              </option>\n                            ))}\n                          </select>\n                        </div>\n                        <button\n                          type=\"submit\"\n                          className=\"btn btn-primary\"\n                        >\n                          Submit\n                        </button>\n                      </form>\n                    )}\n                  </td>\n                  <td>\n                    {new Date(\n                      parseInt(ballot.end) * 1000\n                    ).toLocaleString()}\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </Table>\n      </Box>\n    </div>\n  );\n}\n\nconst StyledLogo = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  .icon {\n    font-size: 2.8rem;\n    margin: 0 0.8rem;\n    height: 1.8rem;\n  }\n`;\n\nconst CreateBallot = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 1rem 0;\n`;\n\nconst StyledForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  max-width: 60vw;\n  align-items: flex-start;\n\n  .form-group {\n    display: flex;\n    flex-direction: column;\n    max-width: 60vw;\n    margin: 0.7rem 0;\n\n    label {\n      margin: 0.3rem 0;\n    }\n\n    input {\n      width: 30rem;\n      font-size: 1.3rem;\n      padding: 0.2rem;\n\n      &::-webkit-input-placeholder {\n        opacity: 0.3; /*Change the opacity between 0 and 1*/\n      }\n    }\n  }\n`;\n\nconst StyledButton = styled.button`\n  border: none;\n  background: #6c7ae0;\n  color: white;\n  padding: 0.6rem;\n  font-size: 1rem;\n  border-radius: 0.3rem;\n  align-self: center;\n  margin: 0.5rem;\n`;\n\nconst AddVoters = styled.div`\n  display: flex;\n  justify-content: center;\n  margin: 1rem 0;\n`;\n\nconst Box = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  margin: 1.5rem 0;\n`;\n\nconst Table = styled.div`\n  button {\n    margin: 0.4rem;\n  }\n\n  h2 {\n    font-family: \"Roboto\", sans-serif;\n  }\n\n  th,\n  td {\n    padding: 1.5rem;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n  }\n\n  th {\n    position: sticky;\n    top: 0;\n    background: #6c7ae0;\n    text-align: left;\n    font-weight: normal;\n    font-size: 1.1rem;\n    color: white;\n  }\n\n  tr:nth-child(even) td {\n    background: #f8f6ff;\n  }\n`;\n\nexport default App;\n","/Users/maciejmondalski/Desktop/Web-Dev/EatTheBlocks/Dapp30/Voting-DApp/client/src/utils.js",[],"/Users/maciejmondalski/Desktop/Web-Dev/EatTheBlocks/Dapp30/Voting-DApp/client/src/GlobalStyles.js",[],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":50,"column":6,"nodeType":"29","endLine":50,"endColumn":39,"suggestions":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'isReady' and 'updateBallots'. Either include them or remove the dependency array.","ArrayExpression",["33"],"no-global-assign","no-unsafe-negation",{"desc":"34","fix":"35"},"Update the dependencies array to be: [accounts, contract, web3, admin, isReady, updateBallots]",{"range":"36","text":"37"},[1434,1467],"[accounts, contract, web3, admin, isReady, updateBallots]"]